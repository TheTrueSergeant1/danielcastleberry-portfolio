<div id="terminal-component">
  <div class="terminal-body" id="terminal-body">
    <div id="terminal-output"></div>
    <div class="input-line">
      <span class="prompt">user@dc-portfolio:~$</span>
      <input type="text" id="terminal-input" autocomplete="off" autofocus />
      <span class="cursor">_</span>
    </div>
  </div>
</div>

<style>
#terminal-component {
  position: fixed;
  inset: 0;
  background: rgba(13,17,23,0.95);
  display: none;
  flex-direction: column;
  padding: 1rem;
  z-index: 1000;
  backdrop-filter: blur(6px);
}
body.terminal-mode #terminal-component { display: flex; }

.terminal-body {
  flex-grow: 1;
  overflow-y: auto;
  font-family: 'Courier New', Courier, monospace;
  font-size: 0.9rem;
  color: #c9d1d9;
  padding-bottom: 1rem;
}

.input-line {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  margin-top: 0.5rem;
}

.prompt { color: #58a6ff; font-weight: bold; }

#terminal-input {
  background: transparent;
  border: none;
  outline: none;
  color: #c9d1d9;
  flex-grow: 1;
  font-family: inherit;
  font-size: 0.9rem;
}

.cursor {
  color: #58a6ff;
  animation: blink 1s step-start infinite;
}
@keyframes blink { 0%,50% { opacity: 1; } 51%,100% { opacity: 0; } }

.terminal-output-line {
  margin: 0.2rem 0;
  white-space: pre-wrap;
  line-height: 1.4;
}
.terminal-success { color: #4ade80; } /* green */
.terminal-warning { color: #facc15; } /* yellow */
.terminal-error { color: #f87171; font-weight: bold; } /* red */
.terminal-command { color: #58a6ff; font-weight: bold; }
.terminal-description { color: #c9d1d9; }
</style>

<script>
function initializeTerminal() {
  const terminalBody = document.getElementById('terminal-body');
  const output = document.getElementById('terminal-output');
  const input = document.getElementById('terminal-input');

  if (!input || !output || !terminalBody || input.dataset.initialized) return;
  input.dataset.initialized = 'true';

  // --- Routes (no blog) ---
  const pages = {
    about: '/about',
    skills: '/skills',
    experience: '/experience',
    homelab: '/homelab',
    certifications: '/certifications',
    projects: '/projects'
  };

  // --- Virtual Files (blog removed) ---
  const pageContent = {
    about: `Daniel Castleberry - About Me
I am a proactive Junior Cybersecurity student with hands-on 
internship experience in security operations. Eager to apply 
technical skills and a diligent work ethic.

-Learn more in the graphical portion of the site!`,
    skills: `Technical Skills Overview
- Operating Systems: Linux, Windows, Virtual Machines
- Security Tools: Insight IDR (Rapid7), ServiceNow, ZScaler, Trend Micro Suite, Mimecast
- Security Concepts: Threat Detection, Digital Forensics, Cryptography, Networking (CCNA Knowledge)
- Programming & Web: C++, Java, HTML, CSS, JavaScript (basic)`,
    experience: `Experience Summary
- Cybersecurity Intern at US Silica (Summer 2023)
--------------------------------------------------
  - Modernized phishing awareness training materials, directly enhancing employee understanding of critical cyber safety concepts.
  - Gained direct, hands-on experience with enterprise-grade security software including InsightIDR, ServiceNow, and Mimecast.
  - Shadowed the Senior Security Engineer, learning to handle support tickets and gaining valuable exposure to confidential security operations.
  - Actively monitored and researched emerging cybersecurity threats to contribute to the team's situational awareness.
  ================================================================================================================================================
- Certified Trainer at Chipotle (2023 - Current)
--------------------------------------------------
  - Applied strong problem-solving skills to manage customer service issues and resolve conflicts in a high-pressure, fast-paced environment.
  - Led end-of-shift closing procedures, coordinating with team members to ensure smooth operational transitions.
  - Trained and mentored new team members on operational efficiency and service quality standards.`,
    homelab: `Homelab Overview
- Built a personal cybersecurity lab with multiple VMs
- Practiced penetration testing and network defense scenarios
- Experimented with SIEM tools and forensic analysis

-Learn more and see diagrams in the graphical portion of the site!`,
    certifications: `Certifications Overview
                IN PROGRESS
  ===========================
- CompTIA Security+ (2024)
- Cisco CCNA (2023)
- A+

-See the roadmap in the graphical portion of the site!`,
    projects: `Projects Summary
- Personal Portfolio Website (Astro)
- Cybersecurity Homelab`
  };

  // --- Commands ---
  const commands = {
    whoami: () => `<span class="terminal-success">Daniel Castleberry - Cybersecurity Student</span>`,
    date: () => `<span class="terminal-success">${new Date().toString()}</span>`,
    time: () => `<span class="terminal-success">${new Date().toLocaleTimeString()}</span>`,
    ls: () => `<span class="terminal-success">${Object.keys(pageContent).join('\n')}</span>`,
    list: () => commands.ls(),
    cat: (args) => {
      const file = args[0];
      if (!file) return `<span class="terminal-warning">Usage: cat [file]</span>`;
      if (pageContent[file]) return `<span class="terminal-success">${pageContent[file]}</span>`;
      return `<span class="terminal-error">cat: ${file}: No such file</span>`;
    },
    show: (args) => commands.cat(args),
    gui: () => { document.body.classList.remove('terminal-mode'); return ''; },
    clear: () => { output.innerHTML = ''; return ''; },
    help: () => {
      const helpLines = [
        ['whoami', 'Display user info'],
        ['date', 'Show current date and time'],
        ['time', 'Show current time'],
        ['ls / list', 'List readable files'],
        ['cat / show [file]', "Display content of a file"],
        ['go [page]', 'Navigate to a GUI page'],
        ['open [page]', 'Open a GUI page in a new tab'],
        ['back', 'Go back to the previous page'],
        ['gui', 'Return to GUI view'],
        ['clear', 'Clear the terminal screen'],
        ['echo [text]', 'Print the text you type'],
        ['random [min] [max]', 'Generate a random number'],
        ['fortune', 'Get a motivational quote'],
        ['joke', 'Get a cybersecurity joke'],
        ['projects', 'Quick overview of projects'],
        ['skills', 'Quick overview of skills'],
        ['resume', 'Show link to resume'],
        ['social', 'Show social media links']
      ];
      return helpLines.map(line => `<span class="terminal-success">${line[0]}</span> - <span class="terminal-description">${line[1]}</span>`).join('\n');
    },
    go: (args) => {
      const page = args[0];
      if (!page) return `<span class="terminal-warning">Usage: go [page]</span>`;
      if (pages[page]) { window.location.href = pages[page]; return `<span class="terminal-success">Navigating to ${page}...</span>`; }
      return `<span class="terminal-error">go: ${page}: Page not found</span>`;
    },
    open: (args) => {
      const page = args[0];
      if (!page) return `<span class="terminal-warning">Usage: open [page]</span>`;
      if (pages[page]) { window.open(pages[page], '_blank'); return `<span class="terminal-success">Opened ${page} in new tab</span>`; }
      return `<span class="terminal-error">open: ${page}: Page not found</span>`;
    },
    back: () => { window.history.back(); return `<span class="terminal-success">Going back...</span>`; },
    echo: (args) => args.join(' '),
    random: (args) => {
      let min = parseInt(args[0]) || 0;
      let max = parseInt(args[1]) || 100;
      if (min > max) [min, max] = [max, min];
      return `<span class="terminal-success">${Math.floor(Math.random() * (max - min + 1)) + min}</span>`;
    },
    fortune: () => {
      const fortunes = [
        "Keep pushing forward!",
        "Cybersecurity is a journey, not a sprint.",
        "Every day is a chance to learn something new.",
        "Success is built on persistence.",
        "Hack the planet ethically!"
      ];
      return `<span class="terminal-success">${fortunes[Math.floor(Math.random() * fortunes.length)]}</span>`;
    },
    joke: () => {
      const jokes = [
        "Why did the hacker break up with the internet? Too many connections.",
        "I would tell you a UDP joke, but you might not get it.",
        "Why do programmers prefer dark mode? Because light attracts bugs."
      ];
      return `<span class="terminal-success">${jokes[Math.floor(Math.random() * jokes.length)]}</span>`;
    },
    projects: () => `<span class="terminal-success">- Personal Portfolio Website (Astro)\n- Cybersecurity Homelab</span>`,
    skills: () => `<span class="terminal-success">- Linux, Windows, VMs\n- Security Tools: InsightIDR, ServiceNow, ZScaler\n- Programming: C++, Java, HTML, CSS, JS(basic)</span>`,
    resume: () => `<span class="terminal-success">Resume: <a href="/resume.pdf" target="_blank">Download PDF</a></span>`,
    social: () => `<span class="terminal-success">GitHub: <a href="https://github.com/dcastleberry" target="_blank">dcastleberry</a>\nLinkedIn: <a href="https://linkedin.com/in/dcastleberry" target="_blank">Daniel Castleberry</a></span>`
  };

  // --- Command History ---
  let history = [];
  let historyIndex = -1;

  // --- Output Helper ---
  function appendOutput(html) {
    const lines = html.split('\n');
    lines.forEach(line => {
      const div = document.createElement('div');
      div.className = 'terminal-output-line';
      div.innerHTML = line;
      output.appendChild(div);
    });
    if (terminalBody) terminalBody.scrollTop = terminalBody.scrollHeight;
  }

  // --- Autocomplete ---
  function autocomplete(value) {
    const available = [...Object.keys(commands), ...Object.keys(pageContent)];
    return available.filter(cmd => cmd.startsWith(value));
  }

  // --- Keyboard Input ---
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const fullCmd = input.value.trim();
      if (!fullCmd) return;
      appendOutput(`<span class="terminal-command">user@dc-portfolio:~$ ${fullCmd}</span>`);
      history.push(fullCmd);
      historyIndex = history.length;
      input.value = '';
      const [command, ...args] = fullCmd.split(' ');
      if (commands[command]) {
        const result = commands[command](args);
        if (result) appendOutput(result);
      } else {
        appendOutput(`<span class="terminal-error">Command not found: ${command}</span>`);
      }
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex > 0) { historyIndex--; input.value = history[historyIndex]; }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex < history.length - 1) { historyIndex++; input.value = history[historyIndex]; }
      else { historyIndex = history.length; input.value = ''; }
    } else if (e.key === 'Tab') {
      e.preventDefault();
      const value = input.value.trim();
      const matches = autocomplete(value);
      if (matches.length === 1) input.value = matches[0] + ' ';
      else if (matches.length > 1) appendOutput(matches.join('  ')); // Use regular spaces
    }
  });
}

document.addEventListener('astro:page-load', () => setTimeout(initializeTerminal, 0));
</script>